# from https://github.com/concourse/concourse-docker/blob/master/docker-compose.yml

version: '3'

services:
  rocketchat:
    image: rocket.chat:latest
    networks:
      - rocket-notify
    command: bash -c 'for i in `seq 1 30`; do node main.js && s=$$? && break || s=$$?; echo "Tried $$i times. Waiting 5 secs..."; sleep 5; done; (exit $$s)'
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http://${ROCKETCHAT_URL}:3000
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      #- Accounts_UseDNSDomainCheck=True
      # see https://rocket.chat/docs/administrator-guides/create-the-first-admin/
      - ADMIN_USERNAME=admin
      - ADMIN_PASS=admin
      - ADMIN_EMAIL=admin@no-reply.com
    depends_on:
      - mongo
    ports:
      - 3000:3000

  mongo:
    image: mongo
    networks:
      - rocket-notify
    restart: unless-stopped
    volumes:
      - ./data/db:/data/db
      - ./data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo
    networks:
      - rocket-notify
    command: 'bash -c "for i in `seq 1 30`; do mongo mongo/rocketchat --eval \"rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})\" && s=$$? && break || s=$$?; echo \"Tried $$i times. Waiting 5 secs...\"; sleep 5; done; (exit $$s)"'
    depends_on:
      - mongo

  db:
    image: postgres
    networks:
      - rocket-notify
    environment:
      POSTGRES_DB: concourse
      POSTGRES_USER: concourse_user
      POSTGRES_PASSWORD: concourse_pass

  web:
    image: concourse/concourse
    networks:
      - rocket-notify
    command: web
    links: [db]
    depends_on: [db]
    ports: ["8080:8080"]
    volumes: ["./keys:/concourse-keys"]
    environment:
      CONCOURSE_EXTERNAL_URL: http://${CONCOURSE_FQDN}:8080
      CONCOURSE_POSTGRES_HOST: db
      CONCOURSE_POSTGRES_USER: concourse_user
      CONCOURSE_POSTGRES_PASSWORD: concourse_pass
      CONCOURSE_POSTGRES_DATABASE: concourse
      CONCOURSE_ADD_LOCAL_USER: test:test
      CONCOURSE_MAIN_TEAM_LOCAL_USER: test
      CONCOURSE_SESSION_SIGNING_KEY: /concourse-keys/web/session_signing_key
      CONCOURSE_TSA_HOST_KEY: /concourse-keys/web/tsa_host_key
      CONCOURSE_TSA_AUTHORIZED_KEYS: /concourse-keys/worker/authorized_worker_keys

  worker:
    image: concourse/concourse
    networks:
    - rocket-notify
    command: worker
    privileged: true
    depends_on: [web]
    volumes: ["./keys:/concourse-keys"]
    links: [web]
    stop_signal: SIGUSR2
    environment:
      CONCOURSE_TSA_HOST: web:2222
      CONCOURSE_TSA_PUBLIC_KEY: /concourse-keys/web/tsa_host_key.pub
      CONCOURSE_TSA_WORKER_PRIVATE_KEY: /concourse-keys/worker/worker_key

networks:
  rocket-notify:
    external: true